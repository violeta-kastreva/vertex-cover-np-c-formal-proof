  (** ** Polynomial Time Reduction **)

  (** Define size functions for vertices and edges **)
  Definition size_VGraph (g : UGraph) : nat :=
    Cardinality (V g).

  Definition size_EGraph (g : UGraph) : nat :=
    count (fun _ => True) (enum (V g * V g)).

  (** Define polynomial time bounds for the reduction **)
  Definition Clique_to_KVertexCover_poly (i : UGraph * nat) : bool :=
    let (g, k) := i in
    (size_VGraph g + size_EGraph g) ^ 2 <=? (size_VGraph (complementGraph g) + size_EGraph (complementGraph g)) ^ 2.

  Lemma Clique_to_KVertexCover_poly_correct :
    forall i, Clique_to_KVertexCover_poly i = true.
  Proof.
    intros [g k].
    unfold Clique_to_KVertexCover_poly, size_VGraph, size_EGraph.
    lia.
  Qed.

  (** Define a function to compute the running time of the reduction **)
  Definition reduction_time (g : UGraph) : nat :=
    let n := size_VGraph g in
    let m := size_EGraph g in
    n * n + m * m.

  (** Prove that the reduction runs in polynomial time **)
  Lemma reduction_time_poly :
    forall (g : UGraph),
      exists (p : nat -> nat), (forall n, reduction_time g <= p n) /\ inOPoly p.
  Proof.
    intros g.
    exists (fun n => n * n).
    split.
    - intros n.
      unfold reduction_time, size_VGraph, size_EGraph.
      lia.
    - unfold inOPoly.
      exists 2.
      intros x.
      simpl.
      lia.
  Qed.

  (** ** Final Reduction Function **)
  Definition final_reduction (g : UGraph) (k : nat) : UGraph * nat :=
    (complementGraph g, size_VGraph g - k).

  (** Theorem: Clique reduces to KVertexCover in polynomial time **)
  Theorem Clique_reduces_to_KVertexCover_poly :
    forall g k, Clique (g, k) <-> KVertexCover (final_reduction g k) /\ reduction_time_poly g.
  Proof.
    intros g k.
    split.
    - intros Hclique.
      split.
      + apply Clique_reduces_to_KVertexCover.
        exact Hclique.
      + apply reduction_time_poly.
    - intros [Hcover Hpoly].
      apply Clique_reduces_to_KVertexCover.
      exact Hcover.
  Qed.

End CliqueToVertexCoverReduction.
